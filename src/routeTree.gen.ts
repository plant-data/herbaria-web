/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteRouteImport } from './routes/search/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SearchIndexRouteImport } from './routes/search/index'
import { Route as ExternalIndexRouteImport } from './routes/external/index'
import { Route as HerbariaIdIndexRouteImport } from './routes/$herbariaId/index'
import { Route as SpecimensOccurrenceIDRouteImport } from './routes/specimens/$occurrenceID'
import { Route as SearchTableRouteImport } from './routes/search/table'
import { Route as SearchMapRouteImport } from './routes/search/map'
import { Route as SearchGraphsRouteImport } from './routes/search/graphs'
import { Route as SearchDebugFiltersRouteImport } from './routes/search/debug-filters'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as HerbariaIdSearchRouteRouteImport } from './routes/$herbariaId/search/route'
import { Route as HerbariaIdSearchIndexRouteImport } from './routes/$herbariaId/search/index'
import { Route as HerbariaIdSpecimensOccurrenceIDRouteImport } from './routes/$herbariaId/specimens/$occurrenceID'
import { Route as HerbariaIdSearchTableRouteImport } from './routes/$herbariaId/search/table'
import { Route as HerbariaIdSearchMapRouteImport } from './routes/$herbariaId/search/map'
import { Route as HerbariaIdSearchGraphsRouteImport } from './routes/$herbariaId/search/graphs'

const SearchRouteRoute = SearchRouteRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchIndexRoute = SearchIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SearchRouteRoute,
} as any)
const ExternalIndexRoute = ExternalIndexRouteImport.update({
  id: '/external/',
  path: '/external/',
  getParentRoute: () => rootRouteImport,
} as any)
const HerbariaIdIndexRoute = HerbariaIdIndexRouteImport.update({
  id: '/$herbariaId/',
  path: '/$herbariaId/',
  getParentRoute: () => rootRouteImport,
} as any)
const SpecimensOccurrenceIDRoute = SpecimensOccurrenceIDRouteImport.update({
  id: '/specimens/$occurrenceID',
  path: '/specimens/$occurrenceID',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchTableRoute = SearchTableRouteImport.update({
  id: '/table',
  path: '/table',
  getParentRoute: () => SearchRouteRoute,
} as any)
const SearchMapRoute = SearchMapRouteImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => SearchRouteRoute,
} as any)
const SearchGraphsRoute = SearchGraphsRouteImport.update({
  id: '/graphs',
  path: '/graphs',
  getParentRoute: () => SearchRouteRoute,
} as any)
const SearchDebugFiltersRoute = SearchDebugFiltersRouteImport.update({
  id: '/debug-filters',
  path: '/debug-filters',
  getParentRoute: () => SearchRouteRoute,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const HerbariaIdSearchRouteRoute = HerbariaIdSearchRouteRouteImport.update({
  id: '/$herbariaId/search',
  path: '/$herbariaId/search',
  getParentRoute: () => rootRouteImport,
} as any)
const HerbariaIdSearchIndexRoute = HerbariaIdSearchIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HerbariaIdSearchRouteRoute,
} as any)
const HerbariaIdSpecimensOccurrenceIDRoute =
  HerbariaIdSpecimensOccurrenceIDRouteImport.update({
    id: '/$herbariaId/specimens/$occurrenceID',
    path: '/$herbariaId/specimens/$occurrenceID',
    getParentRoute: () => rootRouteImport,
  } as any)
const HerbariaIdSearchTableRoute = HerbariaIdSearchTableRouteImport.update({
  id: '/table',
  path: '/table',
  getParentRoute: () => HerbariaIdSearchRouteRoute,
} as any)
const HerbariaIdSearchMapRoute = HerbariaIdSearchMapRouteImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => HerbariaIdSearchRouteRoute,
} as any)
const HerbariaIdSearchGraphsRoute = HerbariaIdSearchGraphsRouteImport.update({
  id: '/graphs',
  path: '/graphs',
  getParentRoute: () => HerbariaIdSearchRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/search': typeof SearchRouteRouteWithChildren
  '/$herbariaId/search': typeof HerbariaIdSearchRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/search/debug-filters': typeof SearchDebugFiltersRoute
  '/search/graphs': typeof SearchGraphsRoute
  '/search/map': typeof SearchMapRoute
  '/search/table': typeof SearchTableRoute
  '/specimens/$occurrenceID': typeof SpecimensOccurrenceIDRoute
  '/$herbariaId': typeof HerbariaIdIndexRoute
  '/external': typeof ExternalIndexRoute
  '/search/': typeof SearchIndexRoute
  '/$herbariaId/search/graphs': typeof HerbariaIdSearchGraphsRoute
  '/$herbariaId/search/map': typeof HerbariaIdSearchMapRoute
  '/$herbariaId/search/table': typeof HerbariaIdSearchTableRoute
  '/$herbariaId/specimens/$occurrenceID': typeof HerbariaIdSpecimensOccurrenceIDRoute
  '/$herbariaId/search/': typeof HerbariaIdSearchIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/search/debug-filters': typeof SearchDebugFiltersRoute
  '/search/graphs': typeof SearchGraphsRoute
  '/search/map': typeof SearchMapRoute
  '/search/table': typeof SearchTableRoute
  '/specimens/$occurrenceID': typeof SpecimensOccurrenceIDRoute
  '/$herbariaId': typeof HerbariaIdIndexRoute
  '/external': typeof ExternalIndexRoute
  '/search': typeof SearchIndexRoute
  '/$herbariaId/search/graphs': typeof HerbariaIdSearchGraphsRoute
  '/$herbariaId/search/map': typeof HerbariaIdSearchMapRoute
  '/$herbariaId/search/table': typeof HerbariaIdSearchTableRoute
  '/$herbariaId/specimens/$occurrenceID': typeof HerbariaIdSpecimensOccurrenceIDRoute
  '/$herbariaId/search': typeof HerbariaIdSearchIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/search': typeof SearchRouteRouteWithChildren
  '/$herbariaId/search': typeof HerbariaIdSearchRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/search/debug-filters': typeof SearchDebugFiltersRoute
  '/search/graphs': typeof SearchGraphsRoute
  '/search/map': typeof SearchMapRoute
  '/search/table': typeof SearchTableRoute
  '/specimens/$occurrenceID': typeof SpecimensOccurrenceIDRoute
  '/$herbariaId/': typeof HerbariaIdIndexRoute
  '/external/': typeof ExternalIndexRoute
  '/search/': typeof SearchIndexRoute
  '/$herbariaId/search/graphs': typeof HerbariaIdSearchGraphsRoute
  '/$herbariaId/search/map': typeof HerbariaIdSearchMapRoute
  '/$herbariaId/search/table': typeof HerbariaIdSearchTableRoute
  '/$herbariaId/specimens/$occurrenceID': typeof HerbariaIdSpecimensOccurrenceIDRoute
  '/$herbariaId/search/': typeof HerbariaIdSearchIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/search'
    | '/$herbariaId/search'
    | '/demo/tanstack-query'
    | '/search/debug-filters'
    | '/search/graphs'
    | '/search/map'
    | '/search/table'
    | '/specimens/$occurrenceID'
    | '/$herbariaId'
    | '/external'
    | '/search/'
    | '/$herbariaId/search/graphs'
    | '/$herbariaId/search/map'
    | '/$herbariaId/search/table'
    | '/$herbariaId/specimens/$occurrenceID'
    | '/$herbariaId/search/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/demo/tanstack-query'
    | '/search/debug-filters'
    | '/search/graphs'
    | '/search/map'
    | '/search/table'
    | '/specimens/$occurrenceID'
    | '/$herbariaId'
    | '/external'
    | '/search'
    | '/$herbariaId/search/graphs'
    | '/$herbariaId/search/map'
    | '/$herbariaId/search/table'
    | '/$herbariaId/specimens/$occurrenceID'
    | '/$herbariaId/search'
  id:
    | '__root__'
    | '/'
    | '/search'
    | '/$herbariaId/search'
    | '/demo/tanstack-query'
    | '/search/debug-filters'
    | '/search/graphs'
    | '/search/map'
    | '/search/table'
    | '/specimens/$occurrenceID'
    | '/$herbariaId/'
    | '/external/'
    | '/search/'
    | '/$herbariaId/search/graphs'
    | '/$herbariaId/search/map'
    | '/$herbariaId/search/table'
    | '/$herbariaId/specimens/$occurrenceID'
    | '/$herbariaId/search/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SearchRouteRoute: typeof SearchRouteRouteWithChildren
  HerbariaIdSearchRouteRoute: typeof HerbariaIdSearchRouteRouteWithChildren
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  SpecimensOccurrenceIDRoute: typeof SpecimensOccurrenceIDRoute
  HerbariaIdIndexRoute: typeof HerbariaIdIndexRoute
  ExternalIndexRoute: typeof ExternalIndexRoute
  HerbariaIdSpecimensOccurrenceIDRoute: typeof HerbariaIdSpecimensOccurrenceIDRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/': {
      id: '/search/'
      path: '/'
      fullPath: '/search/'
      preLoaderRoute: typeof SearchIndexRouteImport
      parentRoute: typeof SearchRouteRoute
    }
    '/external/': {
      id: '/external/'
      path: '/external'
      fullPath: '/external'
      preLoaderRoute: typeof ExternalIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$herbariaId/': {
      id: '/$herbariaId/'
      path: '/$herbariaId'
      fullPath: '/$herbariaId'
      preLoaderRoute: typeof HerbariaIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/specimens/$occurrenceID': {
      id: '/specimens/$occurrenceID'
      path: '/specimens/$occurrenceID'
      fullPath: '/specimens/$occurrenceID'
      preLoaderRoute: typeof SpecimensOccurrenceIDRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/table': {
      id: '/search/table'
      path: '/table'
      fullPath: '/search/table'
      preLoaderRoute: typeof SearchTableRouteImport
      parentRoute: typeof SearchRouteRoute
    }
    '/search/map': {
      id: '/search/map'
      path: '/map'
      fullPath: '/search/map'
      preLoaderRoute: typeof SearchMapRouteImport
      parentRoute: typeof SearchRouteRoute
    }
    '/search/graphs': {
      id: '/search/graphs'
      path: '/graphs'
      fullPath: '/search/graphs'
      preLoaderRoute: typeof SearchGraphsRouteImport
      parentRoute: typeof SearchRouteRoute
    }
    '/search/debug-filters': {
      id: '/search/debug-filters'
      path: '/debug-filters'
      fullPath: '/search/debug-filters'
      preLoaderRoute: typeof SearchDebugFiltersRouteImport
      parentRoute: typeof SearchRouteRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$herbariaId/search': {
      id: '/$herbariaId/search'
      path: '/$herbariaId/search'
      fullPath: '/$herbariaId/search'
      preLoaderRoute: typeof HerbariaIdSearchRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$herbariaId/search/': {
      id: '/$herbariaId/search/'
      path: '/'
      fullPath: '/$herbariaId/search/'
      preLoaderRoute: typeof HerbariaIdSearchIndexRouteImport
      parentRoute: typeof HerbariaIdSearchRouteRoute
    }
    '/$herbariaId/specimens/$occurrenceID': {
      id: '/$herbariaId/specimens/$occurrenceID'
      path: '/$herbariaId/specimens/$occurrenceID'
      fullPath: '/$herbariaId/specimens/$occurrenceID'
      preLoaderRoute: typeof HerbariaIdSpecimensOccurrenceIDRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$herbariaId/search/table': {
      id: '/$herbariaId/search/table'
      path: '/table'
      fullPath: '/$herbariaId/search/table'
      preLoaderRoute: typeof HerbariaIdSearchTableRouteImport
      parentRoute: typeof HerbariaIdSearchRouteRoute
    }
    '/$herbariaId/search/map': {
      id: '/$herbariaId/search/map'
      path: '/map'
      fullPath: '/$herbariaId/search/map'
      preLoaderRoute: typeof HerbariaIdSearchMapRouteImport
      parentRoute: typeof HerbariaIdSearchRouteRoute
    }
    '/$herbariaId/search/graphs': {
      id: '/$herbariaId/search/graphs'
      path: '/graphs'
      fullPath: '/$herbariaId/search/graphs'
      preLoaderRoute: typeof HerbariaIdSearchGraphsRouteImport
      parentRoute: typeof HerbariaIdSearchRouteRoute
    }
  }
}

interface SearchRouteRouteChildren {
  SearchDebugFiltersRoute: typeof SearchDebugFiltersRoute
  SearchGraphsRoute: typeof SearchGraphsRoute
  SearchMapRoute: typeof SearchMapRoute
  SearchTableRoute: typeof SearchTableRoute
  SearchIndexRoute: typeof SearchIndexRoute
}

const SearchRouteRouteChildren: SearchRouteRouteChildren = {
  SearchDebugFiltersRoute: SearchDebugFiltersRoute,
  SearchGraphsRoute: SearchGraphsRoute,
  SearchMapRoute: SearchMapRoute,
  SearchTableRoute: SearchTableRoute,
  SearchIndexRoute: SearchIndexRoute,
}

const SearchRouteRouteWithChildren = SearchRouteRoute._addFileChildren(
  SearchRouteRouteChildren,
)

interface HerbariaIdSearchRouteRouteChildren {
  HerbariaIdSearchGraphsRoute: typeof HerbariaIdSearchGraphsRoute
  HerbariaIdSearchMapRoute: typeof HerbariaIdSearchMapRoute
  HerbariaIdSearchTableRoute: typeof HerbariaIdSearchTableRoute
  HerbariaIdSearchIndexRoute: typeof HerbariaIdSearchIndexRoute
}

const HerbariaIdSearchRouteRouteChildren: HerbariaIdSearchRouteRouteChildren = {
  HerbariaIdSearchGraphsRoute: HerbariaIdSearchGraphsRoute,
  HerbariaIdSearchMapRoute: HerbariaIdSearchMapRoute,
  HerbariaIdSearchTableRoute: HerbariaIdSearchTableRoute,
  HerbariaIdSearchIndexRoute: HerbariaIdSearchIndexRoute,
}

const HerbariaIdSearchRouteRouteWithChildren =
  HerbariaIdSearchRouteRoute._addFileChildren(
    HerbariaIdSearchRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SearchRouteRoute: SearchRouteRouteWithChildren,
  HerbariaIdSearchRouteRoute: HerbariaIdSearchRouteRouteWithChildren,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  SpecimensOccurrenceIDRoute: SpecimensOccurrenceIDRoute,
  HerbariaIdIndexRoute: HerbariaIdIndexRoute,
  ExternalIndexRoute: ExternalIndexRoute,
  HerbariaIdSpecimensOccurrenceIDRoute: HerbariaIdSpecimensOccurrenceIDRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
